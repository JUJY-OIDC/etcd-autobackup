{{- if eq .Values.cloudProvider "oci" }}

apiVersion: v1
kind: ConfigMap
metadata:
  name: etcd-backup-configmap-oci
  namespace: etcd-autobackup
data:
  test.sh: |
    #!/bin/sh

    ######oci configure ; automation using expect 
    echo "Configuring OCI-CLI..."
    expect -c "
    spawn $HOME/bin/oci setup config

    expect \"Enter a location for your config\"
    send -- \"$HOME/.oci/config\r\"

    expect \"Enter a user OCID\"
    send -- \"{{ .Values.oci.user_ocid }}\r\"

    expect \"Enter a tenancy OCID\"
    send -- \"{{ .Values.oci.tenancy_ocid }}\r\"

    expect \"Enter a region\"
    send -- \"{{ .Values.oci.bucket_region }}\r\"

    expect \"Do you want to generate a new API Signing RSA key pair?\"
    send -- \"n\r\"

    expect \"Enter the location of your private key file\"
    send -- \"{{ .Values.oci.api_key_path }}\r\"

    expect eof
    "
    echo "Successfully Configured OCI-CLI"


    ######take a snapshot
    echo "Taking Snapshot..."

    echo "ETCD_ENDPOINT={{ .Values.etcd.endpoint }}"
    ETCDCTL_API=3 etcdctl snapshot save --endpoints={{ .Values.etcd.endpoint }} --cacert=/cert/ca.crt  --cert=/cert/server.crt  --key=/cert/server.key  etcd-backup.db --debug
    ETCDCTL_API=3 etcdctl --write-out=table snapshot status etcd-backup.db

    edho "Snapshot Taken Successfully."


    ######create oci bucket 
    # Check if the bucket exists
    BUCKET_NAME="jujy-etcd-backup-{{ .Values.oci.bucket_region }}"
    if $HOME/bin/oci os bucket get --bucket-name "$BUCKET_NAME" 2>&1 | grep -q 'BucketNotFound'; then
      echo "Creating OCI bucket '$BUCKET_NAME'..."
      $HOME/bin/oci os bucket create --compartment-id {{ .Values.oci.tenancy_ocid }} --name "$BUCKET_NAME"
      # Check the response status
      if [ $? -eq 0 ]; then
          echo "OCI bucket '$BUCKET_NAME' created successfully."
      else
          echo "Failed to create OCI bucket '$BUCKET_NAME'. Please check the error message."
          exit 1
      fi
    else
       echo "OCI bucket '$BUCKET_NAME' already exists. Skipping bucket creation."
    fi


    ######backup to the oci storage
    echo "Uploading Snapshot to Oracle Storage..."
    timestamp=$(date -u +"%Y-%m-%dT%H:%M")
    $HOME/bin/oci os object put --bucket-name $BUCKET_NAME --file etcd-backup.db --namespace {{ .Values.oci.namespace }}--name "etcd-backup-${timestamp}.db"

    echo "Snapshot Uploaded a to OCI Bucket Successfully."    


{{- end }}